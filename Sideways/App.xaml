<Application x:Class="Sideways.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:sideways="clr-namespace:Sideways"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Resources/Geometries.xaml" />
                <ResourceDictionary Source="Resources/Button.xaml" />
                <ResourceDictionary Source="Resources/ScrollBar.xaml" />
                <ResourceDictionary Source="Resources/ComboBox.xaml" />
                <ResourceDictionary Source="Resources/DataGrid.xaml" />
                <ResourceDictionary Source="Resources/TabControl.xaml" />
                <ResourceDictionary Source="Resources/TreeView.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <Style x:Key="VerticalAxisGridSplitter" TargetType="{x:Type GridSplitter}">
                <Setter Property="Width" Value="1" />
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Stretch" />
                <Setter Property="Background" Value="{x:Static sideways:Brushes.DarkGray}" />
                <Setter Property="ShowsPreview" Value="False" />
                <!--  We  hack it with negative margin for easier resize  -->
                <Setter Property="Panel.ZIndex" Value="100" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridSplitter}">
                            <Border Margin="-12,0" Background="Transparent">
                                <Rectangle Width="1"
                                           HorizontalAlignment="Center"
                                           Fill="{TemplateBinding Background}"
                                           Stretch="Fill" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type sideways:CrossHair}">
                <Setter Property="Brush" Value="White" />
                <Setter Property="Opacity" Value="0.5" />
                <Setter Property="Position" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=(sideways:CrossHair.Position)}" />
            </Style>

            <Style TargetType="{x:Type ListBox}">
                <Setter Property="Foreground" Value="{x:Static sideways:Brushes.Gray}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0" />
            </Style>

            <Style TargetType="{x:Type Window}">
                <Setter Property="Background" Value="{x:Static sideways:Brushes.Background}" />
                <Setter Property="TextElement.Foreground" Value="{x:Static sideways:Brushes.Gray}" />
            </Style>

            <Style TargetType="{x:Type Expander}">
                <Setter Property="Foreground" Value="{x:Static sideways:Brushes.Gray}" />
                <Setter Property="Background" Value="Transparent" />
            </Style>

            <Style TargetType="{x:Type ToolTip}">
                <Setter Property="Background" Value="{x:Static sideways:Brushes.Background}" />
            </Style>

            <Style TargetType="{x:Type ContextMenu}">
                <Setter Property="Background" Value="{x:Static sideways:Brushes.Background}" />
            </Style>

            <Style TargetType="{x:Type MenuItem}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{x:Static sideways:Brushes.Text}" />
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{x:Static sideways:Brushes.DisabledText}" />
                        <Setter Property="FontStyle" Value="Oblique" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="IconStyle" TargetType="{x:Type Shape}">
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Stretch" Value="Uniform" />
                <Setter Property="Margin" Value="0" />
                <Setter Property="Width" Value="10" />
                <Setter Property="Height" Value="10" />
                <Setter Property="Fill" Value="{x:Static sideways:Brushes.EnabledText}" />
                <Setter Property="StrokeThickness" Value="0" />
                <Setter Property="Stroke" Value="{x:Null}" />
                <Style.Triggers>
                    <Trigger Property="sideways:Icon.IsSpinning" Value="True">
                        <Setter Property="RenderTransform">
                            <Setter.Value>
                                <RotateTransform Angle="0" />
                            </Setter.Value>
                        </Setter>
                        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />

                        <Trigger.EnterActions>
                            <BeginStoryboard x:Name="Spin">
                                <Storyboard>
                                    <DoubleAnimation RepeatBehavior="Forever"
                                                     Storyboard.TargetProperty="RenderTransform.(RotateTransform.Angle)"
                                                     From="0"
                                                     To="360"
                                                     Duration="0:0:2" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="Spin" />
                        </Trigger.ExitActions>
                    </Trigger>

                    <Trigger Property="sideways:Icon.IsPulsing" Value="True">
                        <Setter Property="RenderTransform">
                            <Setter.Value>
                                <TranslateTransform X="0" Y="0" />
                            </Setter.Value>
                        </Setter>

                        <Trigger.EnterActions>
                            <BeginStoryboard x:Name="Pulse">
                                <Storyboard>
                                    <DoubleAnimation RepeatBehavior="Forever"
                                                     Storyboard.TargetProperty="RenderTransform.(TranslateTransform.Y)"
                                                     From="-3"
                                                     To="3"
                                                     Duration="0:0:2" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="Pulse" />
                        </Trigger.ExitActions>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type TextBox}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="Foreground" Value="{x:Static sideways:Brushes.EnabledText}" />
                <Setter Property="Background" Value="Transparent" />

                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{x:Static sideways:Brushes.DisabledText}" />
                        <Setter Property="FontStyle" Value="Oblique" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
